{"cells":[{"cell_type":"markdown","source":["#**Diplomatura en Ciencia de Datos, Aprendizaje Automático y sus Aplicaciones**\n","\n","##**Edición 2022**\n","\n","#Trabajo práctico entregable - Parte 2\n","**GRUPO 17**\n","\n","**Conrrero, Agustina**\n","\n","**Sanchez Herrera, Carlos**\n","\n","**Serrantes, Sebastian**"],"metadata":{"id":"0-Q8FNGLTN0b"}},{"cell_type":"markdown","metadata":{"id":"6dbOLVpLXrm_"},"source":["# Laboratorio 2: Armado de un esquema de aprendizaje automático\n","\n","En el laboratorio final se espera que puedan poner en práctica los conocimientos adquiridos en el curso, trabajando con un conjunto de datos de clasificación.\n","\n","El objetivo es que se introduzcan en el desarrollo de un esquema para hacer tareas de aprendizaje automático: selección de un modelo, ajuste de hiperparámetros y evaluación.\n","\n","El conjunto de datos a utilizar está en `./data/loan_data.csv`. Si abren el archivo verán que al principio (las líneas que empiezan con `#`) describen el conjunto de datos y sus atributos (incluyendo el atributo de etiqueta o clase).\n","\n","Se espera que hagan uso de las herramientas vistas en el curso. Se espera que hagan uso especialmente de las herramientas brindadas por `scikit-learn`."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"92_7gpZzXrnK"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# TODO: Agregar las librerías que hagan falta\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.linear_model import SGDClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import precision_score\n","from sklearn.metrics import recall_score\n","from sklearn.metrics import f1_score\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import confusion_matrix\n","from sklearn.model_selection import ParameterGrid\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.tree import plot_tree\n","from sklearn.pipeline import make_pipeline\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.pipeline import Pipeline\n","from sklearn.calibration import CalibratedClassifierCV\n","from sklearn.metrics import roc_curve,auc\n","\n","from IPython.display import Image\n","from IPython.core.display import HTML"]},{"cell_type":"markdown","metadata":{"id":"o-67odZXXrnX"},"source":["## Carga de datos y división en entrenamiento y evaluación\n","\n","La celda siguiente se encarga de la carga de datos (haciendo uso de pandas). Estos serán los que se trabajarán en el resto del laboratorio."]},{"cell_type":"code","source":["# Damos acceso al Drive para importar los archivos con los que vamos a trabajar\n","from google.colab import drive\n","import pandas as pd\n","from google.colab import files \n","\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cD365oEGfmy6","executionInfo":{"status":"ok","timestamp":1665532027059,"user_tz":180,"elapsed":35072,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"b9d5e1e1-1891-47bb-9e09-a1e0fcf56eb4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["SHARED_FOLDER_ALIAS = 'DiplomaturaGrupo17'\n","DATASETS_PATH = '/content/drive/MyDrive/' + SHARED_FOLDER_ALIAS + '/IntroML/data/'"],"metadata":{"id":"HjYhTqRjOpRx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#!ls {DATASETS_PATH}"],"metadata":{"id":"AiV3japVhnVZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Datos etiquetados\n","path = DATASETS_PATH + 'loan_data.csv'\n","dataset = pd.read_csv (path, comment=\"#\")\n","\n","dataset"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"MpA7GjWf70ht","executionInfo":{"status":"ok","timestamp":1665532028054,"user_tz":180,"elapsed":997,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"3af8229f-1d40-43cd-bbaf-f97bf1064bf2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      TARGET   LOAN   MORTDUE     VALUE   YOJ  DEROG  DELINQ       CLAGE  \\\n","0          0   4700   88026.0  115506.0   6.0    0.0     0.0  182.248332   \n","1          0  19300   39926.0  101208.0   4.0    0.0     0.0  140.051638   \n","2          0   5700   71556.0   79538.0   2.0    0.0     0.0   92.643085   \n","3          0  13000   44875.0   57713.0   0.0    1.0     0.0  184.990324   \n","4          0  19300   72752.0  106084.0  11.0    0.0     0.0  193.707100   \n","...      ...    ...       ...       ...   ...    ...     ...         ...   \n","1849       1  53400  228236.0  305514.0   6.0    0.0     0.0   11.148069   \n","1850       1  53600  235895.0  299772.0   5.0    0.0     0.0  112.748282   \n","1851       1  53600  208197.0  297280.0   4.0    1.0     1.0  160.485251   \n","1852       1  65500  205156.0  290239.0   2.0    0.0     0.0   98.808206   \n","1853       1  77400   87651.0  224630.0   9.0    0.0     2.0   73.469630   \n","\n","      NINQ  CLNO     DEBTINC  \n","0      0.0  27.0   29.209023  \n","1      0.0  14.0   31.545694  \n","2      0.0  15.0   41.210012  \n","3      1.0  12.0   28.602076  \n","4      1.0  13.0   30.686106  \n","...    ...   ...         ...  \n","1849   0.0   2.0   34.558417  \n","1850   7.0  22.0   44.945929  \n","1851   2.0  29.0   41.646731  \n","1852   1.0  21.0  144.189001  \n","1853   3.0  13.0   40.929793  \n","\n","[1854 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-dcb9b72e-be26-4f0a-92ce-28112a4754e0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TARGET</th>\n","      <th>LOAN</th>\n","      <th>MORTDUE</th>\n","      <th>VALUE</th>\n","      <th>YOJ</th>\n","      <th>DEROG</th>\n","      <th>DELINQ</th>\n","      <th>CLAGE</th>\n","      <th>NINQ</th>\n","      <th>CLNO</th>\n","      <th>DEBTINC</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>4700</td>\n","      <td>88026.0</td>\n","      <td>115506.0</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>182.248332</td>\n","      <td>0.0</td>\n","      <td>27.0</td>\n","      <td>29.209023</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>19300</td>\n","      <td>39926.0</td>\n","      <td>101208.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>140.051638</td>\n","      <td>0.0</td>\n","      <td>14.0</td>\n","      <td>31.545694</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>5700</td>\n","      <td>71556.0</td>\n","      <td>79538.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>92.643085</td>\n","      <td>0.0</td>\n","      <td>15.0</td>\n","      <td>41.210012</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>13000</td>\n","      <td>44875.0</td>\n","      <td>57713.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>184.990324</td>\n","      <td>1.0</td>\n","      <td>12.0</td>\n","      <td>28.602076</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>19300</td>\n","      <td>72752.0</td>\n","      <td>106084.0</td>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>193.707100</td>\n","      <td>1.0</td>\n","      <td>13.0</td>\n","      <td>30.686106</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1849</th>\n","      <td>1</td>\n","      <td>53400</td>\n","      <td>228236.0</td>\n","      <td>305514.0</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>11.148069</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>34.558417</td>\n","    </tr>\n","    <tr>\n","      <th>1850</th>\n","      <td>1</td>\n","      <td>53600</td>\n","      <td>235895.0</td>\n","      <td>299772.0</td>\n","      <td>5.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>112.748282</td>\n","      <td>7.0</td>\n","      <td>22.0</td>\n","      <td>44.945929</td>\n","    </tr>\n","    <tr>\n","      <th>1851</th>\n","      <td>1</td>\n","      <td>53600</td>\n","      <td>208197.0</td>\n","      <td>297280.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>160.485251</td>\n","      <td>2.0</td>\n","      <td>29.0</td>\n","      <td>41.646731</td>\n","    </tr>\n","    <tr>\n","      <th>1852</th>\n","      <td>1</td>\n","      <td>65500</td>\n","      <td>205156.0</td>\n","      <td>290239.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>98.808206</td>\n","      <td>1.0</td>\n","      <td>21.0</td>\n","      <td>144.189001</td>\n","    </tr>\n","    <tr>\n","      <th>1853</th>\n","      <td>1</td>\n","      <td>77400</td>\n","      <td>87651.0</td>\n","      <td>224630.0</td>\n","      <td>9.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>73.469630</td>\n","      <td>3.0</td>\n","      <td>13.0</td>\n","      <td>40.929793</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1854 rows × 11 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dcb9b72e-be26-4f0a-92ce-28112a4754e0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-dcb9b72e-be26-4f0a-92ce-28112a4754e0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-dcb9b72e-be26-4f0a-92ce-28112a4754e0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"INkYxNMHXrna"},"outputs":[],"source":["\n","# División entre instancias y etiquetas\n","X, y = dataset.iloc[:, 1:], dataset.TARGET\n","\n","# división entre entrenamiento y evaluación\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l1d_sqAgXrnc","outputId":"222eeca2-2762-4901-b596-d3a169cfda41","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1665532028055,"user_tz":180,"elapsed":16,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   TARGET   LOAN  MORTDUE     VALUE   YOJ  DEROG  DELINQ       CLAGE  NINQ  \\\n","0       0   4700  88026.0  115506.0   6.0    0.0     0.0  182.248332   0.0   \n","1       0  19300  39926.0  101208.0   4.0    0.0     0.0  140.051638   0.0   \n","2       0   5700  71556.0   79538.0   2.0    0.0     0.0   92.643085   0.0   \n","3       0  13000  44875.0   57713.0   0.0    1.0     0.0  184.990324   1.0   \n","4       0  19300  72752.0  106084.0  11.0    0.0     0.0  193.707100   1.0   \n","\n","   CLNO    DEBTINC  \n","0  27.0  29.209023  \n","1  14.0  31.545694  \n","2  15.0  41.210012  \n","3  12.0  28.602076  \n","4  13.0  30.686106  "],"text/html":["\n","  <div id=\"df-1b1471db-40cd-4d53-b070-43be564a29be\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TARGET</th>\n","      <th>LOAN</th>\n","      <th>MORTDUE</th>\n","      <th>VALUE</th>\n","      <th>YOJ</th>\n","      <th>DEROG</th>\n","      <th>DELINQ</th>\n","      <th>CLAGE</th>\n","      <th>NINQ</th>\n","      <th>CLNO</th>\n","      <th>DEBTINC</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>4700</td>\n","      <td>88026.0</td>\n","      <td>115506.0</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>182.248332</td>\n","      <td>0.0</td>\n","      <td>27.0</td>\n","      <td>29.209023</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>19300</td>\n","      <td>39926.0</td>\n","      <td>101208.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>140.051638</td>\n","      <td>0.0</td>\n","      <td>14.0</td>\n","      <td>31.545694</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>5700</td>\n","      <td>71556.0</td>\n","      <td>79538.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>92.643085</td>\n","      <td>0.0</td>\n","      <td>15.0</td>\n","      <td>41.210012</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>13000</td>\n","      <td>44875.0</td>\n","      <td>57713.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>184.990324</td>\n","      <td>1.0</td>\n","      <td>12.0</td>\n","      <td>28.602076</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>19300</td>\n","      <td>72752.0</td>\n","      <td>106084.0</td>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>193.707100</td>\n","      <td>1.0</td>\n","      <td>13.0</td>\n","      <td>30.686106</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b1471db-40cd-4d53-b070-43be564a29be')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1b1471db-40cd-4d53-b070-43be564a29be button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1b1471db-40cd-4d53-b070-43be564a29be');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}],"source":["dataset.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_2ffwMZ4Xrni","outputId":"c53687ff-119c-4414-e23c-302123ef9293","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1665532028055,"user_tz":180,"elapsed":13,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            TARGET          LOAN        MORTDUE          VALUE          YOJ  \\\n","count  1854.000000   1854.000000    1854.000000    1854.000000  1854.000000   \n","mean      0.166667  19111.758360   76316.051780  107321.088457     8.900216   \n","std       0.372779  11000.345961   46227.026585   56039.685066     7.552677   \n","min       0.000000   1700.000000    5627.000000   21144.000000     0.000000   \n","25%       0.000000  12000.000000   48984.750000   70787.250000     3.000000   \n","50%       0.000000  17000.000000   67201.000000   94198.000000     7.000000   \n","75%       0.000000  23900.000000   93731.500000  122976.250000    13.000000   \n","max       1.000000  89800.000000  399412.000000  512650.000000    41.000000   \n","\n","             DEROG       DELINQ        CLAGE         NINQ         CLNO  \\\n","count  1854.000000  1854.000000  1854.000000  1854.000000  1854.000000   \n","mean      0.187702     0.319849   180.300783     1.128910    21.857066   \n","std       0.704882     0.928452    84.838308     1.664555     9.510840   \n","min       0.000000     0.000000     0.486711     0.000000     0.000000   \n","25%       0.000000     0.000000   116.970718     0.000000    16.000000   \n","50%       0.000000     0.000000   174.967815     1.000000    21.000000   \n","75%       0.000000     0.000000   232.261800     2.000000    27.000000   \n","max      10.000000    10.000000  1168.233561    13.000000    65.000000   \n","\n","           DEBTINC  \n","count  1854.000000  \n","mean     34.573408  \n","std       9.308794  \n","min       0.838118  \n","25%      29.427210  \n","50%      35.363407  \n","75%      39.357987  \n","max     144.189001  "],"text/html":["\n","  <div id=\"df-5a37d0e0-5f42-46c5-8f5d-ad7b9c417968\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TARGET</th>\n","      <th>LOAN</th>\n","      <th>MORTDUE</th>\n","      <th>VALUE</th>\n","      <th>YOJ</th>\n","      <th>DEROG</th>\n","      <th>DELINQ</th>\n","      <th>CLAGE</th>\n","      <th>NINQ</th>\n","      <th>CLNO</th>\n","      <th>DEBTINC</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1854.000000</td>\n","      <td>1854.000000</td>\n","      <td>1854.000000</td>\n","      <td>1854.000000</td>\n","      <td>1854.000000</td>\n","      <td>1854.000000</td>\n","      <td>1854.000000</td>\n","      <td>1854.000000</td>\n","      <td>1854.000000</td>\n","      <td>1854.000000</td>\n","      <td>1854.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.166667</td>\n","      <td>19111.758360</td>\n","      <td>76316.051780</td>\n","      <td>107321.088457</td>\n","      <td>8.900216</td>\n","      <td>0.187702</td>\n","      <td>0.319849</td>\n","      <td>180.300783</td>\n","      <td>1.128910</td>\n","      <td>21.857066</td>\n","      <td>34.573408</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.372779</td>\n","      <td>11000.345961</td>\n","      <td>46227.026585</td>\n","      <td>56039.685066</td>\n","      <td>7.552677</td>\n","      <td>0.704882</td>\n","      <td>0.928452</td>\n","      <td>84.838308</td>\n","      <td>1.664555</td>\n","      <td>9.510840</td>\n","      <td>9.308794</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>1700.000000</td>\n","      <td>5627.000000</td>\n","      <td>21144.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.486711</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.838118</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.000000</td>\n","      <td>12000.000000</td>\n","      <td>48984.750000</td>\n","      <td>70787.250000</td>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>116.970718</td>\n","      <td>0.000000</td>\n","      <td>16.000000</td>\n","      <td>29.427210</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.000000</td>\n","      <td>17000.000000</td>\n","      <td>67201.000000</td>\n","      <td>94198.000000</td>\n","      <td>7.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>174.967815</td>\n","      <td>1.000000</td>\n","      <td>21.000000</td>\n","      <td>35.363407</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>0.000000</td>\n","      <td>23900.000000</td>\n","      <td>93731.500000</td>\n","      <td>122976.250000</td>\n","      <td>13.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>232.261800</td>\n","      <td>2.000000</td>\n","      <td>27.000000</td>\n","      <td>39.357987</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.000000</td>\n","      <td>89800.000000</td>\n","      <td>399412.000000</td>\n","      <td>512650.000000</td>\n","      <td>41.000000</td>\n","      <td>10.000000</td>\n","      <td>10.000000</td>\n","      <td>1168.233561</td>\n","      <td>13.000000</td>\n","      <td>65.000000</td>\n","      <td>144.189001</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a37d0e0-5f42-46c5-8f5d-ad7b9c417968')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5a37d0e0-5f42-46c5-8f5d-ad7b9c417968 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5a37d0e0-5f42-46c5-8f5d-ad7b9c417968');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}],"source":["dataset.describe()"]},{"cell_type":"markdown","metadata":{"id":"Nwi8VMvxXrnk"},"source":["\n","Documentación:\n","\n","- https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html"]},{"cell_type":"markdown","metadata":{"id":"wIKn_azQXrnl"},"source":["## Ejercicio 1: Descripción de los Datos y la Tarea\n","\n","Responder las siguientes preguntas:\n","\n","1. ¿De qué se trata el conjunto de datos?\n","2. ¿Cuál es la variable objetivo que hay que predecir? ¿Qué significado tiene?\n","3. ¿Qué información (atributos) hay disponible para hacer la predicción?\n","4. ¿Qué atributos imagina ud. que son los más determinantes para la predicción?\n","\n","**No hace falta escribir código para responder estas preguntas.**"]},{"cell_type":"markdown","source":["1. El conjunto de datos está obtenido del departamento de créditos de un banco. El mismo contiene información sobre 5960 préstamos para créditos hipotecarios y los datos estan categorizados según hayan caído en default o no.\n","\n","2. La variable a predecir TARGET es de tipo binaria (0-1). Los valores nulos corresponden a aquellos créditos que han sido cnacelados, mientras que los 1 son aquellos que han incumplido. \n","\n","3. Hay 12 atributos disponibles: \n","\n","LOAN: Monto de la solicitud de préstamo\n"," \n","MORTDUE: Monto adeudado de la hipoteca existente\n"," \n","VALUE: Valor de la propiedad actual\n"," \n","YOJ: Años en el trabajo actual\n"," \n","DEROG: Número de informes importantes derogados \n"," \n","DELINQ: Número de líneas de crédito morosas\n"," \n","CLAGE: Antigüedad de la línea comercial más antigua en meses\n"," \n","NINQ: Número de líneas de crédito recientes\n"," \n","CLNO: Número de líneas de crédito\n"," \n","DEBTINC: Relación deuda-ingresos\n","\n","4) Consideramos que los atributos que más podrían ayudar para la predicción son: LOAN,  MORTDUE, DELINQ y DEBTINC\n"],"metadata":{"id":"H1oPVpt2VGPa"}},{"cell_type":"markdown","metadata":{"id":"4Uw6ujV0Xrnm"},"source":["## Ejercicio 2: Predicción con Modelos Lineales\n","\n","En este ejercicio se entrenarán modelos lineales de clasificación para predecir la variable objetivo.\n","\n","Para ello, deberán utilizar la clase SGDClassifier de scikit-learn.\n","\n","Documentación:\n","- https://scikit-learn.org/stable/modules/sgd.html\n","- https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html\n"]},{"cell_type":"markdown","metadata":{"id":"TxJRAyhKXrno"},"source":["### Ejercicio 2.1: SGDClassifier con hiperparámetros por defecto\n","\n","Entrenar y evaluar el clasificador SGDClassifier usando los valores por omisión de scikit-learn para todos los parámetros. Únicamente **fijar la semilla aleatoria** para hacer repetible el experimento.\n","\n","Evaluar sobre el conjunto de **entrenamiento** y sobre el conjunto de **evaluación**, reportando:\n","- Accuracy\n","- Precision\n","- Recall\n","- F1\n","- matriz de confusión"]},{"cell_type":"markdown","source":["#Ejercicio 2:\n","##Visualizacion del conteo de la variable target \n","Como se muestra en el siguiente gráfico, la variable objetivo TARGET se encuentra muy desbalanceada: la mayoría de los datos corresponden a créditos que no entraron en default (valor 0 de la variable TARGET). \n","\n","Por lo tanto, el medir la efectividad del modelo teniendo en cuenta la cantidad de aciertos lleva un sesgo asociado. Es por ello que, tenemos en claro que se deberían evitar los falsos negativos (modelo prediciendo un valor 0 cuando correspondería un 1). \n","\n","Uno de los objetivos será ubicarnos en un punto de la curva ROC que permita optimizar los resultados buscamos. "],"metadata":{"id":"qmxY3EnMQa2u"}},{"cell_type":"code","source":["sns.countplot(dataset.TARGET)\n","plt.title(\"Variable TARGET\")\n","plt.show()  "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":350},"id":"nBT5P3fwQLCa","executionInfo":{"status":"ok","timestamp":1665532028544,"user_tz":180,"elapsed":501,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"e79fba1e-7d48-4b5a-f344-3e5705f87bea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["##Ajuste del modelo:"],"metadata":{"id":"tInddmusRc-Z"}},{"cell_type":"markdown","source":["Decidimos escalar la variable ya que SGDC es altamente sensible a la escala. Es por ello que, decidimos utilizar MaxMinScaler para tener las variables en el rango 0-1. \n","https://scikit-learn.org/stable/modules/sgd.html#tips-on-practical-use"],"metadata":{"id":"8J2fYnUJR82q"}},{"cell_type":"code","source":["scaler=MinMaxScaler()\n","sgd=SGDClassifier(random_state=0)\n","\n","model = make_pipeline(scaler,sgd)\n","model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vuu7n_r-RrjH","executionInfo":{"status":"ok","timestamp":1665532028548,"user_tz":180,"elapsed":20,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"d51ebaff-43dc-4875-9418-960be8aa34a4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('minmaxscaler', MinMaxScaler()),\n","                ('sgdclassifier', SGDClassifier(random_state=0))])"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["y_train_pred= model.predict(X_train)\n","y_test_pred= model.predict(X_test)\n","\n","print(\"ENTRENAMIENTO\")\n","print(classification_report(y_train, y_train_pred))\n","\n","print(\"TESTEO\")\n","print(classification_report(y_test, y_test_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A9imRcF2SLfT","executionInfo":{"status":"ok","timestamp":1665532028549,"user_tz":180,"elapsed":20,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"74f85b99-29c0-4de3-a527-68665c3e05d6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ENTRENAMIENTO\n","              precision    recall  f1-score   support\n","\n","           0       0.88      0.98      0.93      1232\n","           1       0.80      0.34      0.48       251\n","\n","    accuracy                           0.87      1483\n","   macro avg       0.84      0.66      0.70      1483\n","weighted avg       0.87      0.87      0.85      1483\n","\n","TESTEO\n","              precision    recall  f1-score   support\n","\n","           0       0.89      0.98      0.93       313\n","           1       0.74      0.34      0.47        58\n","\n","    accuracy                           0.88       371\n","   macro avg       0.82      0.66      0.70       371\n","weighted avg       0.87      0.88      0.86       371\n","\n"]}]},{"cell_type":"code","source":["\n","cm=confusion_matrix(y_test,y_test_pred)\n","\n","sns.heatmap(cm, annot=True)\n","\n","plt.title(\"Confusion matrix\")     \n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"3U_5fcpklr-K","executionInfo":{"status":"ok","timestamp":1665532028549,"user_tz":180,"elapsed":17,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"ba2d3391-f8d5-4590-f762-b84a239a5717"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["Como se muestra anteriormente, estamos en presencia de un caso de alta precisión y bajo recall para la clase 1. Esto significa que, el modelo no predecirá adecuadamente la clase 1 en la totalidad de los casos, pero que, cuando lo haga, lo hará con alta eficacia. \n","Sin embargo, el modelo precedirá correctamente la clase 0. \n","\n","\n","Esto puede ser debido al desbalance de las clases visto en el punto anterior. Para ello, se pueden implementar estrategias de balanceo como oversampling y undersampling."],"metadata":{"id":"yTJlz6hFRubb"}},{"cell_type":"markdown","source":["### Balanceo de las clases\n"],"metadata":{"id":"d4IQa55wa7yW"}},{"cell_type":"markdown","source":["Debido a que las clases de la variable target estan muy desbalanceadas, se decidió probar con un balanceador de clases `class_weight=’balanced’` como hiperparámetro del modelo: "],"metadata":{"id":"ZaZv7GTFbHB3"}},{"cell_type":"code","source":["scaler=MinMaxScaler()\n","sgd=SGDClassifier(random_state=0, class_weight='balanced')\n","\n","model = make_pipeline(scaler,sgd)\n","model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665532327585,"user_tz":180,"elapsed":275,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"650cdec3-d801-4954-da76-536b9d0a05b5","id":"qjeZ8Ng8bCKe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('minmaxscaler', MinMaxScaler()),\n","                ('sgdclassifier',\n","                 SGDClassifier(class_weight='balanced', random_state=0))])"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["y_train_pred= model.predict(X_train)\n","y_test_pred= model.predict(X_test)\n","\n","print(\"ENTRENAMIENTO\")\n","print(classification_report(y_train, y_train_pred))\n","\n","print(\"TESTEO\")\n","print(classification_report(y_test, y_test_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665532330154,"user_tz":180,"elapsed":3,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"62f75441-9b1f-4cba-9b88-c5ffbd7f7e87","id":"qYtoSZ3fbCKf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ENTRENAMIENTO\n","              precision    recall  f1-score   support\n","\n","           0       0.89      0.96      0.92      1232\n","           1       0.67      0.44      0.53       251\n","\n","    accuracy                           0.87      1483\n","   macro avg       0.78      0.70      0.73      1483\n","weighted avg       0.86      0.87      0.86      1483\n","\n","TESTEO\n","              precision    recall  f1-score   support\n","\n","           0       0.90      0.96      0.93       313\n","           1       0.67      0.41      0.51        58\n","\n","    accuracy                           0.88       371\n","   macro avg       0.78      0.69      0.72       371\n","weighted avg       0.86      0.88      0.86       371\n","\n"]}]},{"cell_type":"code","source":["\n","cm=confusion_matrix(y_test,y_test_pred)\n","\n","sns.heatmap(cm, annot=True)\n","\n","plt.title(\"Confusion matrix\")     \n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1665532333644,"user_tz":180,"elapsed":319,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"e485fade-36c9-4752-dd81-3e3f67b0ff95","id":"cGaqVCIebCKf"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["El balanceo de clases mejoró la predicción, lo cual se puede ver reflejado en valores más altos de las métricas del classification report y de la matriz de confusión."],"metadata":{"id":"jqvocnNEd4rE"}},{"cell_type":"markdown","metadata":{"id":"Ti2SeE4WXrnq"},"source":["### Ejercicio 2.2: Ajuste de Hiperparámetros\n","\n","Seleccionar valores para los hiperparámetros principales del SGDClassifier. Como mínimo, probar diferentes funciones de loss, tasas de entrenamiento y tasas de regularización.\n","\n","Para ello, usar grid-search y 5-fold cross-validation sobre el conjunto de entrenamiento para explorar muchas combinaciones posibles de valores.\n","\n","Reportar accuracy promedio y varianza para todas las configuraciones.\n","\n","Para la mejor configuración encontrada, evaluar sobre el conjunto de **entrenamiento** y sobre el conjunto de **evaluación**, reportando:\n","- Accuracy\n","- Precision\n","- Recall\n","- F1\n","- matriz de confusión\n","\n","Documentación:\n","- https://scikit-learn.org/stable/modules/grid_search.html\n","- https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html"]},{"cell_type":"code","source":["parameters={'sgd__loss':['hinge', 'log', 'modified_huber', 'squared_hinge', 'perceptron'],\n","        'sgd__alpha':[0.0001, 0.001, 0.01, 0.1, 1, 10, 100],\n","        'sgd__penalty':['l1','l2']}"],"metadata":{"id":"_Xk6WSZrxi9k"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Realizamos una validación cruzada con el modelo de descenso de gradiente y la grilla de hiperparámetros. A su vez, utilizamos el parámetro \"class weight\" de SGD Classifier para balancear el dataset durante el entrenamiento. "],"metadata":{"id":"Ik5bN27Zx7Q_"}},{"cell_type":"markdown","source":["A su vez, cambiamos la metrica seleccionada por defecto, accuracy, ya que al tratarse de un dataset desbalanceado en la variable objetivo, no se trata de la mejor métrica para evaluar la eficacia de la predicción del modelo. Es por ello que, elegimos \"balanced accuracy score\".\n","\n"],"metadata":{"id":"ArnSluc2yLLS"}},{"cell_type":"markdown","source":["\"Empíricamente, encontramos que SGD converge después de observar aproximadamente 10 ^ 6 muestras de entrenamiento. Por lo tanto, una primera estimación razonable del número de iteraciones es max_iter = np.ceil (10 ** 6 / n), donde n es el tamaño del conjunto de entrenamiento.\"\n","\n","https://scikit-learn.org/stable/modules/sgd.html#tips-on-practical-use"],"metadata":{"id":"lOnQQcCrywTv"}},{"cell_type":"code","source":["max_iter=np.ceil(10**6 / X_train.shape[0])"],"metadata":{"id":"g6N3qTLgy8Z3"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nuGb_RpQTULo"},"outputs":[],"source":["scaler=MinMaxScaler()\n","sgd= SGDClassifier(random_state=0,class_weight='balanced',max_iter=max_iter)\n","\n","pipe = Pipeline(steps=[('scaler', scaler), ('sgd', sgd)])\n","\n","cv = GridSearchCV(pipe, parameters, scoring='balanced_accuracy', cv=5,refit=True,n_jobs=-1)     \n","cv.fit(X_train, y_train);"]},{"cell_type":"code","source":["results = cv.cv_results_\n","results"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yrnVpsrNzHSk","executionInfo":{"status":"ok","timestamp":1665532523017,"user_tz":180,"elapsed":316,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"60a43b71-ee52-4ff8-bfc4-b75443016b5a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'mean_fit_time': array([0.01005492, 0.00967155, 0.01496401, 0.01258883, 0.01693282,\n","        0.01377029, 0.08738675, 0.04622493, 0.01638503, 0.01103082,\n","        0.00756302, 0.00759997, 0.01090584, 0.00918684, 0.01132536,\n","        0.00790391, 0.03069334, 0.03556294, 0.00845771, 0.0072926 ,\n","        0.00739861, 0.00746446, 0.01194143, 0.007234  , 0.00891447,\n","        0.00694199, 0.01563158, 0.06030993, 0.00651708, 0.00579548,\n","        0.00590687, 0.00532284, 0.00683923, 0.00711656, 0.00648532,\n","        0.00612364, 0.03041658, 0.0057642 , 0.005269  , 0.00484476,\n","        0.00736589, 0.00549922, 0.00772624, 0.00867934, 0.00603967,\n","        0.00566902, 0.00893383, 0.00575767, 0.00605927, 0.00864925,\n","        0.00900998, 0.00954509, 0.01051373, 0.00920548, 0.03517666,\n","        0.02189589, 0.01978345, 0.01148415, 0.00831747, 0.01003442,\n","        0.00489998, 0.0052897 , 0.00614986, 0.00767775, 0.01440449,\n","        0.01104875, 0.01428895, 0.01088777, 0.00627971, 0.00582805]),\n"," 'std_fit_time': array([0.00171945, 0.00254143, 0.003585  , 0.00242772, 0.00303339,\n","        0.00459137, 0.01931737, 0.01912319, 0.00342943, 0.00364602,\n","        0.00098952, 0.00062867, 0.00249063, 0.00147016, 0.00302902,\n","        0.00080106, 0.00506535, 0.00649902, 0.00063345, 0.00030618,\n","        0.00055561, 0.00215197, 0.00461158, 0.0006975 , 0.00206846,\n","        0.00047319, 0.00430622, 0.00658447, 0.00022058, 0.0007234 ,\n","        0.00139617, 0.00014655, 0.00037687, 0.00142226, 0.0004316 ,\n","        0.00058988, 0.03018621, 0.00025199, 0.00028709, 0.00026481,\n","        0.0028108 , 0.00071289, 0.00124736, 0.00295778, 0.00012976,\n","        0.0001209 , 0.00285917, 0.0003025 , 0.00026988, 0.00504846,\n","        0.00288138, 0.00548563, 0.00395155, 0.00454512, 0.02443818,\n","        0.01365218, 0.01234384, 0.00567099, 0.00229745, 0.00725332,\n","        0.00024086, 0.0001614 , 0.0001958 , 0.00183207, 0.00623378,\n","        0.0041926 , 0.00686834, 0.004399  , 0.00040988, 0.00023341]),\n"," 'mean_score_time': array([0.00490851, 0.00227385, 0.00276437, 0.00228667, 0.00269079,\n","        0.00265675, 0.0028513 , 0.00277185, 0.00272179, 0.00250816,\n","        0.00237808, 0.00246572, 0.00265689, 0.00249057, 0.00287156,\n","        0.00194354, 0.00256653, 0.00270834, 0.00219502, 0.00230103,\n","        0.00241489, 0.00254698, 0.00337095, 0.0024035 , 0.00243864,\n","        0.00218258, 0.00242648, 0.00269446, 0.00215201, 0.0020452 ,\n","        0.002424  , 0.00218344, 0.00232916, 0.00241547, 0.00216312,\n","        0.00230417, 0.00260363, 0.00203519, 0.00200262, 0.00199013,\n","        0.00225897, 0.00222135, 0.00227933, 0.00242071, 0.00227637,\n","        0.00211968, 0.00241027, 0.0026885 , 0.00351248, 0.00328646,\n","        0.00231047, 0.00219769, 0.00385842, 0.00440111, 0.00249538,\n","        0.00247974, 0.00235906, 0.00202899, 0.00201769, 0.00203938,\n","        0.00190482, 0.00214715, 0.00224056, 0.0021009 , 0.00322914,\n","        0.00240188, 0.00245409, 0.00243158, 0.0023231 , 0.00215135]),\n"," 'std_score_time': array([5.16254744e-03, 1.00347137e-04, 8.74544003e-04, 1.84397498e-04,\n","        4.57618536e-04, 2.69558639e-04, 2.45767968e-04, 1.52319060e-04,\n","        8.98807055e-05, 7.65706053e-05, 8.69411059e-05, 4.41750446e-05,\n","        6.53278044e-05, 2.33673532e-04, 4.23170597e-04, 5.47041338e-05,\n","        6.45635399e-05, 6.63073917e-05, 8.70776461e-05, 1.49885127e-04,\n","        2.35243899e-04, 6.95096198e-04, 1.95850666e-03, 7.64405808e-05,\n","        1.41931171e-04, 1.57487309e-04, 1.17416694e-04, 1.18867633e-04,\n","        6.29550387e-05, 1.01646137e-04, 6.80654453e-04, 6.72167898e-05,\n","        1.03021151e-04, 2.61519356e-04, 7.39439608e-05, 1.00294011e-04,\n","        2.37163032e-04, 9.55904974e-05, 5.45616321e-05, 1.20353680e-04,\n","        1.09745333e-04, 1.37241239e-04, 7.71155524e-05, 1.09671966e-04,\n","        5.11518491e-05, 1.04755122e-04, 1.44728962e-04, 6.74564299e-04,\n","        2.57618377e-03, 2.09569348e-03, 1.89303835e-04, 8.89905642e-05,\n","        2.98086899e-03, 3.01380801e-03, 2.65976612e-04, 1.99903161e-04,\n","        3.21115879e-04, 1.60620910e-04, 1.01173946e-04, 1.61392114e-04,\n","        9.88011425e-05, 6.06445015e-05, 7.46863999e-05, 1.54785293e-04,\n","        1.64842009e-03, 2.06187464e-04, 2.01856462e-04, 1.68750804e-04,\n","        3.80919178e-05, 2.74544003e-04]),\n"," 'param_sgd__alpha': masked_array(data=[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,\n","                    0.0001, 0.0001, 0.0001, 0.001, 0.001, 0.001, 0.001,\n","                    0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.01, 0.01,\n","                    0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.1,\n","                    0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1,\n","                    1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 10, 10,\n","                    10, 10, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n","                    100],\n","              mask=[False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False],\n","        fill_value='?',\n","             dtype=object),\n"," 'param_sgd__loss': masked_array(data=['hinge', 'hinge', 'log', 'log', 'modified_huber',\n","                    'modified_huber', 'squared_hinge', 'squared_hinge',\n","                    'perceptron', 'perceptron', 'hinge', 'hinge', 'log',\n","                    'log', 'modified_huber', 'modified_huber',\n","                    'squared_hinge', 'squared_hinge', 'perceptron',\n","                    'perceptron', 'hinge', 'hinge', 'log', 'log',\n","                    'modified_huber', 'modified_huber', 'squared_hinge',\n","                    'squared_hinge', 'perceptron', 'perceptron', 'hinge',\n","                    'hinge', 'log', 'log', 'modified_huber',\n","                    'modified_huber', 'squared_hinge', 'squared_hinge',\n","                    'perceptron', 'perceptron', 'hinge', 'hinge', 'log',\n","                    'log', 'modified_huber', 'modified_huber',\n","                    'squared_hinge', 'squared_hinge', 'perceptron',\n","                    'perceptron', 'hinge', 'hinge', 'log', 'log',\n","                    'modified_huber', 'modified_huber', 'squared_hinge',\n","                    'squared_hinge', 'perceptron', 'perceptron', 'hinge',\n","                    'hinge', 'log', 'log', 'modified_huber',\n","                    'modified_huber', 'squared_hinge', 'squared_hinge',\n","                    'perceptron', 'perceptron'],\n","              mask=[False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False],\n","        fill_value='?',\n","             dtype=object),\n"," 'param_sgd__penalty': masked_array(data=['l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',\n","                    'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2',\n","                    'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',\n","                    'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2',\n","                    'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',\n","                    'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2',\n","                    'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',\n","                    'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2'],\n","              mask=[False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False],\n","        fill_value='?',\n","             dtype=object),\n"," 'params': [{'sgd__alpha': 0.0001, 'sgd__loss': 'hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.0001, 'sgd__loss': 'hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.0001, 'sgd__loss': 'log', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.0001, 'sgd__loss': 'log', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.0001, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.0001, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.0001, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.0001, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.0001, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.0001, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.001, 'sgd__loss': 'hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.001, 'sgd__loss': 'hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.001, 'sgd__loss': 'log', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.001, 'sgd__loss': 'log', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.001, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.001, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.001, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.001, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.001, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.001, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.01, 'sgd__loss': 'hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.01, 'sgd__loss': 'hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.01, 'sgd__loss': 'log', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.01, 'sgd__loss': 'log', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.01, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.01, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.01, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.01, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.01, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.01, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.1, 'sgd__loss': 'hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.1, 'sgd__loss': 'hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.1, 'sgd__loss': 'log', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.1, 'sgd__loss': 'log', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.1, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.1, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.1, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.1, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 0.1, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 0.1, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 1, 'sgd__loss': 'hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 1, 'sgd__loss': 'hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 1, 'sgd__loss': 'log', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 1, 'sgd__loss': 'log', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 1, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 1, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 1, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 1, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 1, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 1, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 10, 'sgd__loss': 'hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 10, 'sgd__loss': 'hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 10, 'sgd__loss': 'log', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 10, 'sgd__loss': 'log', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 10, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 10, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 10, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 10, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 10, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 10, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 100, 'sgd__loss': 'hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 100, 'sgd__loss': 'hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 100, 'sgd__loss': 'log', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 100, 'sgd__loss': 'log', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 100, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 100, 'sgd__loss': 'modified_huber', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 100, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 100, 'sgd__loss': 'squared_hinge', 'sgd__penalty': 'l2'},\n","  {'sgd__alpha': 100, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l1'},\n","  {'sgd__alpha': 100, 'sgd__loss': 'perceptron', 'sgd__penalty': 'l2'}],\n"," 'split0_test_score': array([0.67376518, 0.65720648, 0.65793522, 0.67817814, 0.681417  ,\n","        0.71461538, 0.66781377, 0.6791498 , 0.6740081 , 0.68558704,\n","        0.6948583 , 0.68854251, 0.68093117, 0.69295547, 0.67817814,\n","        0.68210526, 0.64246964, 0.62817814, 0.68663968, 0.62785425,\n","        0.68866397, 0.67927126, 0.63008097, 0.68437247, 0.68295547,\n","        0.66995951, 0.68437247, 0.66425101, 0.53785425, 0.68388664,\n","        0.5       , 0.57562753, 0.5       , 0.67437247, 0.5       ,\n","        0.68032389, 0.57805668, 0.68234818, 0.5       , 0.66987854,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.64186235, 0.5       , 0.67639676, 0.5       , 0.66975709,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ]),\n"," 'split1_test_score': array([0.70963563, 0.71165992, 0.65817814, 0.65412955, 0.70259109,\n","        0.57121457, 0.59591093, 0.64530364, 0.57526316, 0.64773279,\n","        0.69951417, 0.68700405, 0.66651822, 0.66449393, 0.68878543,\n","        0.65210526, 0.61591093, 0.59793522, 0.63987854, 0.65744939,\n","        0.71546559, 0.62975709, 0.69319838, 0.67186235, 0.70093117,\n","        0.68068826, 0.65983806, 0.67186235, 0.53048583, 0.70307692,\n","        0.5       , 0.5       , 0.5       , 0.65473684, 0.5       ,\n","        0.66186235, 0.53376518, 0.66388664, 0.5       , 0.67963563,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.63995951, 0.5       , 0.67271255, 0.5       , 0.70068826,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ]),\n"," 'split2_test_score': array([0.57352941, 0.66965567, 0.71138211, 0.71054519, 0.6013869 ,\n","        0.64478718, 0.63283118, 0.69356767, 0.62135342, 0.6480153 ,\n","        0.7236968 , 0.71186035, 0.69954567, 0.69476327, 0.70361071,\n","        0.70325203, 0.64167862, 0.63354854, 0.5       , 0.54507413,\n","        0.64598278, 0.62266858, 0.62697274, 0.69117647, 0.69452415,\n","        0.70229555, 0.70636059, 0.72357724, 0.5       , 0.50203252,\n","        0.5       , 0.5       , 0.5       , 0.68806791, 0.5       ,\n","        0.69117647, 0.60473458, 0.67527499, 0.5       , 0.61860354,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.67407939, 0.5       , 0.67384027, 0.5       , 0.68890483,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ]),\n"," 'split3_test_score': array([0.7495122 , 0.76357724, 0.74715447, 0.74528455, 0.63430894,\n","        0.66796748, 0.74747967, 0.7495122 , 0.5       , 0.53455285,\n","        0.77447154, 0.7296748 , 0.74699187, 0.74121951, 0.75934959,\n","        0.75138211, 0.69333333, 0.68617886, 0.56      , 0.5003252 ,\n","        0.64186992, 0.64186992, 0.61089431, 0.74699187, 0.75715447,\n","        0.73934959, 0.70365854, 0.63504065, 0.5       , 0.69764228,\n","        0.5       , 0.64577236, 0.5       , 0.71105691, 0.59186992,\n","        0.73902439, 0.59089431, 0.74105691, 0.5       , 0.63390244,\n","        0.5       , 0.5       , 0.5       , 0.73178862, 0.5       ,\n","        0.70699187, 0.5       , 0.70699187, 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.61650407,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ]),\n"," 'split4_test_score': array([0.71601626, 0.76585366, 0.7402439 , 0.75382114, 0.73650407,\n","        0.73056911, 0.64821138, 0.60154472, 0.68471545, 0.58796748,\n","        0.69325203, 0.70138211, 0.71105691, 0.69715447, 0.72243902,\n","        0.72666667, 0.69756098, 0.6699187 , 0.50203252, 0.50203252,\n","        0.5996748 , 0.6398374 , 0.63495935, 0.67853659, 0.68105691,\n","        0.68934959, 0.71414634, 0.67349593, 0.52      , 0.6896748 ,\n","        0.5       , 0.62772358, 0.5       , 0.63837398, 0.5       ,\n","        0.66853659, 0.63682927, 0.66650407, 0.5       , 0.59593496,\n","        0.5       , 0.5       , 0.5       , 0.52      , 0.5       ,\n","        0.63837398, 0.5       , 0.63837398, 0.5       , 0.61577236,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.65170732,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ]),\n"," 'mean_test_score': array([0.68449174, 0.71359059, 0.70297877, 0.70839172, 0.6712416 ,\n","        0.66583075, 0.65844939, 0.6738156 , 0.61106802, 0.62077109,\n","        0.71715857, 0.70369276, 0.70100877, 0.69811733, 0.71047258,\n","        0.70310227, 0.6581907 , 0.64315189, 0.57771015, 0.5665471 ,\n","        0.65833141, 0.64268085, 0.63922115, 0.69458795, 0.70332443,\n","        0.6963285 , 0.6936752 , 0.67364544, 0.51766802, 0.65526263,\n","        0.5       , 0.56982469, 0.5       , 0.67332162, 0.51837398,\n","        0.68818474, 0.588856  , 0.68581416, 0.5       , 0.63959102,\n","        0.5       , 0.5       , 0.5       , 0.55035772, 0.5       ,\n","        0.66025342, 0.5       , 0.67366309, 0.5       , 0.63502451,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.55364228,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n","        0.5       , 0.5       , 0.5       , 0.5       , 0.5       ]),\n"," 'std_test_score': array([0.06046713, 0.04548245, 0.03859227, 0.03817537, 0.04814399,\n","        0.05651657, 0.05037113, 0.04936514, 0.06798423, 0.05325402,\n","        0.03068444, 0.01584398, 0.02760529, 0.0246055 , 0.02860946,\n","        0.03443201, 0.03191364, 0.03139671, 0.07457905, 0.06485423,\n","        0.04012093, 0.01957097, 0.02816977, 0.02696763, 0.02789833,\n","        0.02397943, 0.01955069, 0.0285481 , 0.01550185, 0.07689634,\n","        0.        , 0.0614898 , 0.        , 0.02533472, 0.03674797,\n","        0.02732886, 0.03379154, 0.02838501, 0.        , 0.03130364,\n","        0.        , 0.        , 0.        , 0.09104555, 0.        ,\n","        0.0268493 , 0.        , 0.02174643, 0.        , 0.07351657,\n","        0.        , 0.        , 0.        , 0.        , 0.        ,\n","        0.        , 0.        , 0.        , 0.        , 0.06663458,\n","        0.        , 0.        , 0.        , 0.        , 0.        ,\n","        0.        , 0.        , 0.        , 0.        , 0.        ]),\n"," 'rank_test_score': array([16,  2,  8,  4, 21, 22, 24, 17, 34, 33,  1,  5,  9, 10,  3,  7, 26,\n","        28, 36, 38, 25, 29, 31, 12,  6, 11, 13, 19, 42, 27, 43, 37, 43, 20,\n","        41, 14, 35, 15, 43, 30, 43, 43, 43, 40, 43, 23, 43, 18, 43, 32, 43,\n","        43, 43, 43, 43, 43, 43, 43, 43, 39, 43, 43, 43, 43, 43, 43, 43, 43,\n","        43, 43], dtype=int32)}"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["cv.best_estimator_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I2TGTUXpzOzG","executionInfo":{"status":"ok","timestamp":1665532525998,"user_tz":180,"elapsed":2,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"09ae202f-c6c1-47f4-ca9e-6ac6f4442f11"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('scaler', MinMaxScaler()),\n","                ('sgd',\n","                 SGDClassifier(alpha=0.001, class_weight='balanced',\n","                               max_iter=675.0, penalty='l1', random_state=0))])"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["cv.best_params_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BKllKACnzQ-r","executionInfo":{"status":"ok","timestamp":1665532526485,"user_tz":180,"elapsed":4,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"eff664c2-3f3b-4ed8-c1c3-34bf59fd82b1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'sgd__alpha': 0.001, 'sgd__loss': 'hinge', 'sgd__penalty': 'l1'}"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["cv.best_score_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_VJdQl79zVPD","executionInfo":{"status":"ok","timestamp":1665532528426,"user_tz":180,"elapsed":278,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"e5b08f28-2fde-4a8b-f3f1-26a638b76ecf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7171585685325774"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ywx3OhxSTULr","executionInfo":{"status":"ok","timestamp":1665532529006,"user_tz":180,"elapsed":4,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a7c04724-c62f-4b63-982e-699688e5eb92"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('minmaxscaler', MinMaxScaler()),\n","                ('sgdclassifier',\n","                 SGDClassifier(alpha=0.001, class_weight='balanced',\n","                               max_iter=675.0, penalty='l1', random_state=0))])"]},"metadata":{},"execution_count":24}],"source":["scaler=MinMaxScaler()\n","\n","sgd=SGDClassifier(alpha=0.001, loss='hinge', penalty='l1',class_weight='balanced',\n","              random_state=0,max_iter=max_iter)\n","\n","\n","best_model=make_pipeline(scaler,sgd)\n","\n","best_model.fit(X_train, y_train)"]},{"cell_type":"code","source":["y_train_pred_best= best_model.predict(X_train)\n","y_test_pred_best= best_model.predict(X_test)\n","\n","print(\"ENTRENAMIENTO\")\n","print(classification_report(y_train, y_train_pred_best))\n","\n","print(\"TESTEO\")\n","print(classification_report(y_test, y_test_pred_best))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4GE50NkTzfDl","executionInfo":{"status":"ok","timestamp":1665532530579,"user_tz":180,"elapsed":270,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"0e7d8875-18f1-416b-ca43-652972f4d260"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ENTRENAMIENTO\n","              precision    recall  f1-score   support\n","\n","           0       0.91      0.84      0.88      1232\n","           1       0.44      0.60      0.51       251\n","\n","    accuracy                           0.80      1483\n","   macro avg       0.67      0.72      0.69      1483\n","weighted avg       0.83      0.80      0.81      1483\n","\n","TESTEO\n","              precision    recall  f1-score   support\n","\n","           0       0.93      0.87      0.90       313\n","           1       0.47      0.66      0.55        58\n","\n","    accuracy                           0.83       371\n","   macro avg       0.70      0.76      0.72       371\n","weighted avg       0.86      0.83      0.84       371\n","\n"]}]},{"cell_type":"code","source":["cm=confusion_matrix(y_test,y_test_pred_best)\n","\n","sns.heatmap(cm, annot=True)\n","\n","plt.title(\"Confusion matrix\")   \n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"PZQpGsxnzh4-","executionInfo":{"status":"ok","timestamp":1665532532677,"user_tz":180,"elapsed":6,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"63b1784a-a505-4beb-b533-822efb23b758"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["Se reajustaron 70 modelos diferentes e identificamos al mejor modelo al que cumplia con los parámetros: \n","\n","- alpha': 0.001\n","\n","- 'penalty': 'l1'\n","\n","- 'loss': 'hinge'"],"metadata":{"id":"prnzEVFDzmdR"}},{"cell_type":"markdown","source":["En comparación al modelo con parámetros establecidos por default, pareciera que este modelo predice mejor a la clase minoritaria. \n","\n","De todas maneras, creemos que se deberían reducir los falsos negativos. Pudimos observar que en un umbral del 50%, los mismos se reducen. El umbral de probabilidad se puede obtener utilizando el índice de Youden a través de las curvas ROC. "],"metadata":{"id":"BRZQHshj0C1a"}},{"cell_type":"code","source":["def find_cutoff_roc(target, predicted):\n","\n","    fpr, tpr, threshold = roc_curve(target, predicted)\n","    i = np.arange(len(tpr)) \n","    roc = pd.DataFrame({'tpr': pd.Series(tpr),\n","                        'fpr' : pd.Series(fpr),\n","                        'tf' : pd.Series(tpr-(1-fpr), index=i), 'threshold' : pd.Series(threshold, index=i)})\n","    roc_t=roc.iloc[(roc.tf-0).abs().argsort()][:1]\n","\n","    return list(roc_t['threshold']),roc"],"metadata":{"id":"rkD0cQdl3d6d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["threshold,roc_df=find_cutoff_roc(y_test, best_model.decision_function(X_test))\n","print(\"El umbral óptimo es : {:.6f}\".format(threshold[0]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ath-BsQd3V2L","executionInfo":{"status":"ok","timestamp":1665532540205,"user_tz":180,"elapsed":265,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"ef1164a2-61b0-46b1-b8ea-2775d7d6a01b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["El umbral óptimo es : -0.208925\n"]}]},{"cell_type":"code","source":["roc_df[roc_df.threshold==threshold[0]]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"CupfP17w3tw-","executionInfo":{"status":"ok","timestamp":1665532540493,"user_tz":180,"elapsed":4,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"a52e2e60-11bc-49f8-803a-03bbf33e40aa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         tpr       fpr        tf  threshold\n","46  0.775862  0.226837  0.002699  -0.208925"],"text/html":["\n","  <div id=\"df-34aced2f-1acd-4bb5-b5a8-1777db77231a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tpr</th>\n","      <th>fpr</th>\n","      <th>tf</th>\n","      <th>threshold</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>46</th>\n","      <td>0.775862</td>\n","      <td>0.226837</td>\n","      <td>0.002699</td>\n","      <td>-0.208925</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-34aced2f-1acd-4bb5-b5a8-1777db77231a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-34aced2f-1acd-4bb5-b5a8-1777db77231a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-34aced2f-1acd-4bb5-b5a8-1777db77231a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["def plot_roc_auc(actual, preds,optimal_tpr,optimal_fpr):\n","    \n","    fig,axs=plt.subplots(nrows=1,ncols=2,sharex=False,figsize=(10,5))\n","    \n","    fpr, tpr, thresholds = roc_curve(actual, preds)\n","    roc_auc = auc(fpr, tpr)\n","    axs[0].plot(fpr, tpr,'r')\n","    axs[0].plot([0,1],[0,1],'b')\n","    axs[0].set_title('AUC: {}'.format(roc_auc))\n","    axs[0].set_xlabel('FPR')\n","    axs[0].set_ylabel('TPR')\n","    axs[0].hlines(y=optimal_tpr,color='g',xmin=0,xmax=1,linestyles='dotted')\n","    axs[0].vlines(x=optimal_fpr,color='g',ymin=0,ymax=1,linestyles='dotted')\n","    \n","    i = np.arange(len(tpr)) # index for df\n","    roc = pd.DataFrame({'fpr' : pd.Series(fpr, index=i),'tpr' : pd.Series(tpr, index = i), '1-fpr' : pd.Series(1-fpr, index = i), 'tf' : pd.Series(tpr - (1-fpr), index = i), 'thresholds' : pd.Series(thresholds, index = i)})\n","    roc.iloc[(roc.tf-0).abs().argsort()[:1]]\n","    \n","    # Plot tpr vs 1-fpr\n","    axs[1].plot(roc['tpr'])\n","    axs[1].plot(roc['1-fpr'], color = 'red')\n","    axs[1].set_xlabel('1-FPR')\n","    axs[1].set_ylabel('TPR')\n","    axs[1].set_title('Receiver operating characteristic')\n","    axs[1].set_xticklabels([])\n","    plt.show()"],"metadata":{"id":"BIQcKNDp30FO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_roc_auc(y_test,  best_model.decision_function(X_test) ,0.775862,0.226837)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":350},"id":"zGoekNIa3uzA","executionInfo":{"status":"ok","timestamp":1665532540950,"user_tz":180,"elapsed":460,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"d569b7bc-bec3-4995-ff4c-c9ce1ee25860"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["X_test_predicciones=X_test.reset_index(drop=True)\n","X_test_predicciones['predicciones']=best_model.decision_function(X_test)\n","X_test_predicciones.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"L_FkKGG7350M","executionInfo":{"status":"ok","timestamp":1665532540950,"user_tz":180,"elapsed":8,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"2d99d1e7-acdc-4e0a-c982-f22c9be7d069"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    LOAN  MORTDUE     VALUE   YOJ  DEROG  DELINQ       CLAGE  NINQ  CLNO  \\\n","0   4200  50216.0   58541.0  19.0    0.0     0.0  209.871302   0.0  19.0   \n","1  19300  50554.0   76140.0   9.0    2.0     0.0   78.276625   3.0  27.0   \n","2  13000  78766.0  106450.0   6.0    0.0     0.0  107.951312   0.0  26.0   \n","3  11800  67678.0  108092.0  13.0    0.0     7.0  126.658232   0.0  36.0   \n","4  87500  55938.0   86794.0  15.0    0.0     0.0  223.881040   0.0  16.0   \n","\n","     DEBTINC  predicciones  \n","0  20.208033     -1.641663  \n","1  36.026904      1.248928  \n","2  24.870994     -1.024786  \n","3  37.162690      4.027847  \n","4  36.753653     -1.536803  "],"text/html":["\n","  <div id=\"df-ad9dc746-9840-452f-8854-68bb7a198eb0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>LOAN</th>\n","      <th>MORTDUE</th>\n","      <th>VALUE</th>\n","      <th>YOJ</th>\n","      <th>DEROG</th>\n","      <th>DELINQ</th>\n","      <th>CLAGE</th>\n","      <th>NINQ</th>\n","      <th>CLNO</th>\n","      <th>DEBTINC</th>\n","      <th>predicciones</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4200</td>\n","      <td>50216.0</td>\n","      <td>58541.0</td>\n","      <td>19.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>209.871302</td>\n","      <td>0.0</td>\n","      <td>19.0</td>\n","      <td>20.208033</td>\n","      <td>-1.641663</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>19300</td>\n","      <td>50554.0</td>\n","      <td>76140.0</td>\n","      <td>9.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>78.276625</td>\n","      <td>3.0</td>\n","      <td>27.0</td>\n","      <td>36.026904</td>\n","      <td>1.248928</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>13000</td>\n","      <td>78766.0</td>\n","      <td>106450.0</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>107.951312</td>\n","      <td>0.0</td>\n","      <td>26.0</td>\n","      <td>24.870994</td>\n","      <td>-1.024786</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11800</td>\n","      <td>67678.0</td>\n","      <td>108092.0</td>\n","      <td>13.0</td>\n","      <td>0.0</td>\n","      <td>7.0</td>\n","      <td>126.658232</td>\n","      <td>0.0</td>\n","      <td>36.0</td>\n","      <td>37.162690</td>\n","      <td>4.027847</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>87500</td>\n","      <td>55938.0</td>\n","      <td>86794.0</td>\n","      <td>15.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>223.881040</td>\n","      <td>0.0</td>\n","      <td>16.0</td>\n","      <td>36.753653</td>\n","      <td>-1.536803</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad9dc746-9840-452f-8854-68bb7a198eb0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ad9dc746-9840-452f-8854-68bb7a198eb0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ad9dc746-9840-452f-8854-68bb7a198eb0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["X_test_predicciones['prediccion']=X_test_predicciones['predicciones'].apply(lambda x: 1 if x>threshold[0] else 0 )\n","X_test_predicciones"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"V0DMAR6n37W-","executionInfo":{"status":"ok","timestamp":1665532540951,"user_tz":180,"elapsed":8,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"c1fdd443-e0a1-438c-8b01-eb4b53caf0de"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      LOAN  MORTDUE     VALUE   YOJ  DEROG  DELINQ       CLAGE  NINQ  CLNO  \\\n","0     4200  50216.0   58541.0  19.0    0.0     0.0  209.871302   0.0  19.0   \n","1    19300  50554.0   76140.0   9.0    2.0     0.0   78.276625   3.0  27.0   \n","2    13000  78766.0  106450.0   6.0    0.0     0.0  107.951312   0.0  26.0   \n","3    11800  67678.0  108092.0  13.0    0.0     7.0  126.658232   0.0  36.0   \n","4    87500  55938.0   86794.0  15.0    0.0     0.0  223.881040   0.0  16.0   \n","..     ...      ...       ...   ...    ...     ...         ...   ...   ...   \n","366  79100  23553.0  103807.0  25.0    0.0     1.0  142.193458   0.0  13.0   \n","367  16300  79087.0  102921.0  23.0    0.0     0.0  256.253084   0.0  45.0   \n","368  26900  72848.0  101736.0  10.0    0.0     0.0  131.409634   0.0  21.0   \n","369  13000  80587.0  110064.0   6.0    0.0     0.0   85.009197   1.0  13.0   \n","370  14100  52302.0   63589.0   6.0    0.0     0.0  130.342467   4.0   8.0   \n","\n","       DEBTINC  predicciones  prediccion  \n","0    20.208033     -1.641663           0  \n","1    36.026904      1.248928           1  \n","2    24.870994     -1.024786           0  \n","3    37.162690      4.027847           1  \n","4    36.753653     -1.536803           0  \n","..         ...           ...         ...  \n","366  31.469937     -0.768735           0  \n","367  36.987086     -1.378780           0  \n","368  36.369027     -0.615816           0  \n","369  33.990040     -0.180998           1  \n","370  34.792832      0.036356           1  \n","\n","[371 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-fc7104e4-17a6-42e5-b14f-7493efacf3d1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>LOAN</th>\n","      <th>MORTDUE</th>\n","      <th>VALUE</th>\n","      <th>YOJ</th>\n","      <th>DEROG</th>\n","      <th>DELINQ</th>\n","      <th>CLAGE</th>\n","      <th>NINQ</th>\n","      <th>CLNO</th>\n","      <th>DEBTINC</th>\n","      <th>predicciones</th>\n","      <th>prediccion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4200</td>\n","      <td>50216.0</td>\n","      <td>58541.0</td>\n","      <td>19.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>209.871302</td>\n","      <td>0.0</td>\n","      <td>19.0</td>\n","      <td>20.208033</td>\n","      <td>-1.641663</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>19300</td>\n","      <td>50554.0</td>\n","      <td>76140.0</td>\n","      <td>9.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>78.276625</td>\n","      <td>3.0</td>\n","      <td>27.0</td>\n","      <td>36.026904</td>\n","      <td>1.248928</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>13000</td>\n","      <td>78766.0</td>\n","      <td>106450.0</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>107.951312</td>\n","      <td>0.0</td>\n","      <td>26.0</td>\n","      <td>24.870994</td>\n","      <td>-1.024786</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11800</td>\n","      <td>67678.0</td>\n","      <td>108092.0</td>\n","      <td>13.0</td>\n","      <td>0.0</td>\n","      <td>7.0</td>\n","      <td>126.658232</td>\n","      <td>0.0</td>\n","      <td>36.0</td>\n","      <td>37.162690</td>\n","      <td>4.027847</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>87500</td>\n","      <td>55938.0</td>\n","      <td>86794.0</td>\n","      <td>15.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>223.881040</td>\n","      <td>0.0</td>\n","      <td>16.0</td>\n","      <td>36.753653</td>\n","      <td>-1.536803</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>366</th>\n","      <td>79100</td>\n","      <td>23553.0</td>\n","      <td>103807.0</td>\n","      <td>25.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>142.193458</td>\n","      <td>0.0</td>\n","      <td>13.0</td>\n","      <td>31.469937</td>\n","      <td>-0.768735</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>367</th>\n","      <td>16300</td>\n","      <td>79087.0</td>\n","      <td>102921.0</td>\n","      <td>23.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>256.253084</td>\n","      <td>0.0</td>\n","      <td>45.0</td>\n","      <td>36.987086</td>\n","      <td>-1.378780</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>368</th>\n","      <td>26900</td>\n","      <td>72848.0</td>\n","      <td>101736.0</td>\n","      <td>10.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>131.409634</td>\n","      <td>0.0</td>\n","      <td>21.0</td>\n","      <td>36.369027</td>\n","      <td>-0.615816</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>369</th>\n","      <td>13000</td>\n","      <td>80587.0</td>\n","      <td>110064.0</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>85.009197</td>\n","      <td>1.0</td>\n","      <td>13.0</td>\n","      <td>33.990040</td>\n","      <td>-0.180998</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>370</th>\n","      <td>14100</td>\n","      <td>52302.0</td>\n","      <td>63589.0</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>130.342467</td>\n","      <td>4.0</td>\n","      <td>8.0</td>\n","      <td>34.792832</td>\n","      <td>0.036356</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>371 rows × 12 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc7104e4-17a6-42e5-b14f-7493efacf3d1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-fc7104e4-17a6-42e5-b14f-7493efacf3d1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-fc7104e4-17a6-42e5-b14f-7493efacf3d1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["cm=confusion_matrix(y_test,X_test_predicciones.prediccion)\n","\n","sns.heatmap(cm, annot=True)\n","\n","plt.title(\"Confusion matrix\")   \n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"p0G2gohC38yC","executionInfo":{"status":"ok","timestamp":1665532541329,"user_tz":180,"elapsed":385,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"275247d1-bf19-4d4d-92a5-469ae9c442c0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["print(classification_report(y_test, X_test_predicciones.prediccion))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RzABLHlo3-kV","executionInfo":{"status":"ok","timestamp":1665532541330,"user_tz":180,"elapsed":12,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"861fd6df-e58d-4445-fb18-f66c109d472c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.95      0.77      0.85       313\n","           1       0.38      0.76      0.51        58\n","\n","    accuracy                           0.77       371\n","   macro avg       0.66      0.77      0.68       371\n","weighted avg       0.86      0.77      0.80       371\n","\n"]}]},{"cell_type":"markdown","source":["Debido que quisimos disminuir el número de Falsos Negativos, se disminuyó la precisión del model debido al aumento del recall. "],"metadata":{"id":"Q8NRdg5j4BYB"}},{"cell_type":"markdown","metadata":{"id":"7jvR-LPoXrns"},"source":["## Ejercicio 3: Árboles de Decisión\n","\n","En este ejercicio se entrenarán árboles de decisión para predecir la variable objetivo.\n","\n","Para ello, deberán utilizar la clase DecisionTreeClassifier de scikit-learn.\n","\n","Documentación:\n","- https://scikit-learn.org/stable/modules/tree.html\n","  - https://scikit-learn.org/stable/modules/tree.html#tips-on-practical-use\n","- https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html\n","- https://scikit-learn.org/stable/auto_examples/tree/plot_unveil_tree_structure.html"]},{"cell_type":"markdown","metadata":{"id":"IOkTfK-eXrnu"},"source":["### Ejercicio 3.1: DecisionTreeClassifier con hiperparámetros por defecto\n","\n","Entrenar y evaluar el clasificador DecisionTreeClassifier usando los valores por omisión de scikit-learn para todos los parámetros. Únicamente **fijar la semilla aleatoria** para hacer repetible el experimento.\n","\n","Evaluar sobre el conjunto de **entrenamiento** y sobre el conjunto de **evaluación**, reportando:\n","- Accuracy\n","- Precision\n","- Recall\n","- F1\n","- matriz de confusión\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0qEtM1Y3TULu","executionInfo":{"status":"ok","timestamp":1665532541331,"user_tz":180,"elapsed":11,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"06ae8109-ece3-4502-e4b0-ea03860b48dd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(random_state=0)"]},"metadata":{},"execution_count":37}],"source":["model=DecisionTreeClassifier(random_state=0) \n","model.fit(X_train, y_train)"]},{"cell_type":"code","source":["y_train_pred= model.predict(X_train)\n","y_test_pred=model.predict(X_test)\n","\n","print(\"ENTRENAMIENTO\")\n","print(classification_report(y_train, y_train_pred))\n","\n","print(\"TESTEO\")\n","print(classification_report(y_test, y_test_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O91-XmzEzUpz","executionInfo":{"status":"ok","timestamp":1665532541331,"user_tz":180,"elapsed":9,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"4c73bc99-f654-444e-f965-4cc7337db80f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ENTRENAMIENTO\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00      1232\n","           1       1.00      1.00      1.00       251\n","\n","    accuracy                           1.00      1483\n","   macro avg       1.00      1.00      1.00      1483\n","weighted avg       1.00      1.00      1.00      1483\n","\n","TESTEO\n","              precision    recall  f1-score   support\n","\n","           0       0.93      0.93      0.93       313\n","           1       0.62      0.64      0.63        58\n","\n","    accuracy                           0.88       371\n","   macro avg       0.77      0.78      0.78       371\n","weighted avg       0.88      0.88      0.88       371\n","\n"]}]},{"cell_type":"code","source":["cm=confusion_matrix(y_test,y_test_pred)\n","\n","sns.heatmap(cm, annot=True)\n","\n","plt.title(\"Confusion matrix\")   \n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"mHAxSzBAzYpV","executionInfo":{"status":"ok","timestamp":1665532541331,"user_tz":180,"elapsed":8,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"458aa56f-6874-4525-8f10-6c94ca5f103b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"t5uj0E45Xrny"},"source":["### Ejercicio 3.2: Ajuste de Hiperparámetros\n","\n","Seleccionar valores para los hiperparámetros principales del DecisionTreeClassifier. Como mínimo, probar diferentes criterios de partición (criterion), profundidad máxima del árbol (max_depth), y cantidad mínima de samples por hoja (min_samples_leaf).\n","\n","Para ello, usar grid-search y 5-fold cross-validation sobre el conjunto de entrenamiento para explorar muchas combinaciones posibles de valores.\n","\n","Reportar accuracy promedio y varianza para todas las configuraciones.\n","\n","Para la mejor configuración encontrada, evaluar sobre el conjunto de **entrenamiento** y sobre el conjunto de **evaluación**, reportando:\n","- Accuracy\n","- Precision\n","- Recall\n","- F1\n","- matriz de confusión\n","\n","\n","Documentación:\n","- https://scikit-learn.org/stable/modules/grid_search.html\n","- https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html"]},{"cell_type":"code","source":["param_grid = {\n","    \"criterion\": [\"gini\", \"entropy\"],\n","    'max_depth': [2,3,4,5,10,15,20,25,30],\n","    \"min_samples_leaf\": [2,3,4,5,10,15,20,25,30],\n","    \"min_samples_split\": [2,3,4,5,6,7,8,9,10,15,20,25,30]\n","}"],"metadata":{"id":"iOcLNTbs0uIC"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1etY6TFvTULw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665532637803,"user_tz":180,"elapsed":96479,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"6692290f-dfa8-4a25-daef-64e47372cb23"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=5,\n","             estimator=DecisionTreeClassifier(class_weight='balanced',\n","                                              random_state=0),\n","             param_grid={'criterion': ['gini', 'entropy'],\n","                         'max_depth': [2, 3, 4, 5, 10, 15, 20, 25, 30],\n","                         'min_samples_leaf': [2, 3, 4, 5, 10, 15, 20, 25, 30],\n","                         'min_samples_split': [2, 3, 4, 5, 6, 7, 8, 9, 10, 15,\n","                                               20, 25, 30]},\n","             scoring='balanced_accuracy')"]},"metadata":{},"execution_count":41}],"source":["model = DecisionTreeClassifier(random_state=0,class_weight='balanced')\n","\n","cv = GridSearchCV(model, param_grid, scoring='balanced_accuracy', cv=5)\n","cv.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nTaAaFirTULw"},"outputs":[],"source":["results = cv.cv_results_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1Zq_5UcYTULw","colab":{"base_uri":"https://localhost:8080/","height":990},"executionInfo":{"status":"ok","timestamp":1665532637804,"user_tz":180,"elapsed":17,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"9939a0c7-6f72-420e-d881-8f81e8c2c1ac"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     param_criterion param_max_depth param_min_samples_leaf  \\\n","476             gini              10                      2   \n","475             gini              10                      2   \n","710             gini              20                      2   \n","593             gini              15                      2   \n","827             gini              25                      2   \n","944             gini              30                      2   \n","471             gini              10                      2   \n","936             gini              30                      2   \n","937             gini              30                      2   \n","938             gini              30                      2   \n","820             gini              25                      2   \n","821             gini              25                      2   \n","586             gini              15                      2   \n","587             gini              15                      2   \n","585             gini              15                      2   \n","702             gini              20                      2   \n","703             gini              20                      2   \n","704             gini              20                      2   \n","819             gini              25                      2   \n","591             gini              15                      2   \n","942             gini              30                      2   \n","825             gini              25                      2   \n","708             gini              20                      2   \n","2017         entropy              30                      4   \n","2016         entropy              30                      4   \n","2018         entropy              30                      4   \n","2019         entropy              30                      4   \n","2020         entropy              30                      4   \n","2021         entropy              30                      4   \n","1785         entropy              20                      4   \n","\n","     param_min_samples_split  mean_test_score  std_test_score  rank_test_score  \n","476                       10         0.748965        0.050394                1  \n","475                        9         0.748965        0.051703                1  \n","710                       10         0.746243        0.042647                3  \n","593                       10         0.746243        0.042647                3  \n","827                       10         0.746243        0.042647                3  \n","944                       10         0.746243        0.042647                3  \n","471                        5         0.745836        0.047590                7  \n","936                        2         0.745675        0.043632                8  \n","937                        3         0.745675        0.043632                8  \n","938                        4         0.745675        0.043632                8  \n","820                        3         0.745675        0.043632                8  \n","821                        4         0.745675        0.043632                8  \n","586                        3         0.745675        0.043632                8  \n","587                        4         0.745675        0.043632                8  \n","585                        2         0.745675        0.043632                8  \n","702                        2         0.745675        0.043632                8  \n","703                        3         0.745675        0.043632                8  \n","704                        4         0.745675        0.043632                8  \n","819                        2         0.745675        0.043632                8  \n","591                        8         0.745108        0.040509               20  \n","942                        8         0.745108        0.040509               20  \n","825                        8         0.745108        0.040509               20  \n","708                        8         0.745108        0.040509               20  \n","2017                       4         0.744730        0.023442               24  \n","2016                       3         0.744730        0.023442               24  \n","2018                       5         0.744730        0.023442               24  \n","2019                       6         0.744730        0.023442               24  \n","2020                       7         0.744730        0.023442               24  \n","2021                       8         0.744730        0.023442               24  \n","1785                       6         0.744730        0.023442               24  "],"text/html":["\n","  <div id=\"df-e4405586-ad52-4a02-a68a-ff03ede2b2c7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>param_criterion</th>\n","      <th>param_max_depth</th>\n","      <th>param_min_samples_leaf</th>\n","      <th>param_min_samples_split</th>\n","      <th>mean_test_score</th>\n","      <th>std_test_score</th>\n","      <th>rank_test_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>476</th>\n","      <td>gini</td>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>10</td>\n","      <td>0.748965</td>\n","      <td>0.050394</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>475</th>\n","      <td>gini</td>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>9</td>\n","      <td>0.748965</td>\n","      <td>0.051703</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>710</th>\n","      <td>gini</td>\n","      <td>20</td>\n","      <td>2</td>\n","      <td>10</td>\n","      <td>0.746243</td>\n","      <td>0.042647</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>593</th>\n","      <td>gini</td>\n","      <td>15</td>\n","      <td>2</td>\n","      <td>10</td>\n","      <td>0.746243</td>\n","      <td>0.042647</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>827</th>\n","      <td>gini</td>\n","      <td>25</td>\n","      <td>2</td>\n","      <td>10</td>\n","      <td>0.746243</td>\n","      <td>0.042647</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>944</th>\n","      <td>gini</td>\n","      <td>30</td>\n","      <td>2</td>\n","      <td>10</td>\n","      <td>0.746243</td>\n","      <td>0.042647</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>471</th>\n","      <td>gini</td>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>0.745836</td>\n","      <td>0.047590</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>936</th>\n","      <td>gini</td>\n","      <td>30</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0.745675</td>\n","      <td>0.043632</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>937</th>\n","      <td>gini</td>\n","      <td>30</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>0.745675</td>\n","      <td>0.043632</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>938</th>\n","      <td>gini</td>\n","      <td>30</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>0.745675</td>\n","      <td>0.043632</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>820</th>\n","      <td>gini</td>\n","      <td>25</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>0.745675</td>\n","      <td>0.043632</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>821</th>\n","      <td>gini</td>\n","      <td>25</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>0.745675</td>\n","      <td>0.043632</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>586</th>\n","      <td>gini</td>\n","      <td>15</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>0.745675</td>\n","      <td>0.043632</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>587</th>\n","      <td>gini</td>\n","      <td>15</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>0.745675</td>\n","      <td>0.043632</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>585</th>\n","      <td>gini</td>\n","      <td>15</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0.745675</td>\n","      <td>0.043632</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>702</th>\n","      <td>gini</td>\n","      <td>20</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0.745675</td>\n","      <td>0.043632</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>703</th>\n","      <td>gini</td>\n","      <td>20</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>0.745675</td>\n","      <td>0.043632</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>704</th>\n","      <td>gini</td>\n","      <td>20</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>0.745675</td>\n","      <td>0.043632</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>819</th>\n","      <td>gini</td>\n","      <td>25</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0.745675</td>\n","      <td>0.043632</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>591</th>\n","      <td>gini</td>\n","      <td>15</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>0.745108</td>\n","      <td>0.040509</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>942</th>\n","      <td>gini</td>\n","      <td>30</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>0.745108</td>\n","      <td>0.040509</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>825</th>\n","      <td>gini</td>\n","      <td>25</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>0.745108</td>\n","      <td>0.040509</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>708</th>\n","      <td>gini</td>\n","      <td>20</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>0.745108</td>\n","      <td>0.040509</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>2017</th>\n","      <td>entropy</td>\n","      <td>30</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>0.744730</td>\n","      <td>0.023442</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>2016</th>\n","      <td>entropy</td>\n","      <td>30</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>0.744730</td>\n","      <td>0.023442</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>2018</th>\n","      <td>entropy</td>\n","      <td>30</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>0.744730</td>\n","      <td>0.023442</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>2019</th>\n","      <td>entropy</td>\n","      <td>30</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>0.744730</td>\n","      <td>0.023442</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>2020</th>\n","      <td>entropy</td>\n","      <td>30</td>\n","      <td>4</td>\n","      <td>7</td>\n","      <td>0.744730</td>\n","      <td>0.023442</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>2021</th>\n","      <td>entropy</td>\n","      <td>30</td>\n","      <td>4</td>\n","      <td>8</td>\n","      <td>0.744730</td>\n","      <td>0.023442</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>1785</th>\n","      <td>entropy</td>\n","      <td>20</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>0.744730</td>\n","      <td>0.023442</td>\n","      <td>24</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4405586-ad52-4a02-a68a-ff03ede2b2c7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e4405586-ad52-4a02-a68a-ff03ede2b2c7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e4405586-ad52-4a02-a68a-ff03ede2b2c7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":43}],"source":["df = pd.DataFrame(results)\n","df[['param_criterion', 'param_max_depth', \"param_min_samples_leaf\",\"param_min_samples_split\",'mean_test_score', 'std_test_score', 'rank_test_score']].sort_values('rank_test_score')[:30]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oF5tYFOLTULw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665532637804,"user_tz":180,"elapsed":15,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"47f254f0-0b4e-4d8d-e8e6-23629a9427dd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(class_weight='balanced', max_depth=10,\n","                       min_samples_leaf=2, min_samples_split=9, random_state=0)"]},"metadata":{},"execution_count":44}],"source":["cv.best_estimator_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0dZcIt__TULw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665532637805,"user_tz":180,"elapsed":12,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"800737b0-3add-467f-ef36-e05b53ce0fa9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'criterion': 'gini',\n"," 'max_depth': 10,\n"," 'min_samples_leaf': 2,\n"," 'min_samples_split': 9}"]},"metadata":{},"execution_count":45}],"source":["cv.best_params_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sY7uqlIBTULx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665532637805,"user_tz":180,"elapsed":10,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"7c1fbf19-526a-4568-e458-8eba47905c8f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(class_weight='balanced', max_depth=15,\n","                       min_samples_leaf=2, random_state=0)"]},"metadata":{},"execution_count":46}],"source":["best_model=DecisionTreeClassifier(criterion=\"gini\", max_depth=15, min_samples_leaf=2, min_samples_split=2,random_state=0,class_weight='balanced')\n","best_model.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o8XAUvNQTULx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665532637805,"user_tz":180,"elapsed":9,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"b4459774-92f1-4138-a852-766e2114f1a2"},"outputs":[{"output_type":"stream","name":"stdout","text":["ENTRENAMIENTO\n","              precision    recall  f1-score   support\n","\n","           0       1.00      0.96      0.98      1232\n","           1       0.85      1.00      0.92       251\n","\n","    accuracy                           0.97      1483\n","   macro avg       0.93      0.98      0.95      1483\n","weighted avg       0.97      0.97      0.97      1483\n","\n","TESTEO\n","              precision    recall  f1-score   support\n","\n","           0       0.95      0.88      0.91       313\n","           1       0.54      0.74      0.62        58\n","\n","    accuracy                           0.86       371\n","   macro avg       0.74      0.81      0.77       371\n","weighted avg       0.88      0.86      0.87       371\n","\n"]}],"source":["y_train_pred_best= best_model.predict(X_train)\n","y_test_pred_best= best_model.predict(X_test)\n","\n","print(\"ENTRENAMIENTO\")\n","print(classification_report(y_train, y_train_pred_best))\n","\n","print(\"TESTEO\")\n","print(classification_report(y_test, y_test_pred_best))"]},{"cell_type":"markdown","source":["Para todos los casos, se obtuvieron mejores métricas en el entrenamiento que en el testeo, como era de esperarse. Sin embargo, consideramos que los valores obtenidos no son considerablemente diferentes, por lo que probablemente no hubo sobreajuste. "],"metadata":{"id":"AipYFVWbfYKF"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"BVr2CqOATULx","colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1665532637805,"user_tz":180,"elapsed":8,"user":{"displayName":"Agustina Conrrero","userId":"09961504917594344859"}},"outputId":"540da922-6c60-4061-e629-1acafec213fe"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["cm=confusion_matrix(y_test,y_test_pred_best)\n","\n","sns.heatmap(cm, annot=True)\n","\n","plt.title(\"Confusion matrix\")\n","plt.show()"]},{"cell_type":"markdown","source":["Si comparamos ambas matrices de confusión, podemos observar que en el segundo caso disminuyeron los (0,0) y aumentaron los true positives (1,1). Esto es importante ya que lo más relevante es poder predecir correctamente a los créditos que podrían entrar en default, lo que se vio aumentado en esta última instancia. \n"],"metadata":{"id":"5GgUpeGl2ePn"}},{"cell_type":"markdown","metadata":{"id":"iWIkH1HuTULy"},"source":[" El parámetro max_depth es quien marca la diferencia entre ambos modelos. El mismo es un indicador de complejidad en los árboles de decisión, el mismo permite que los nodos crezcan, hasta determinado valor, obteniendose nodos puros si el valor es None. "]},{"cell_type":"markdown","source":["##Conclusion\n","Como conclusion, podemos afirmar que es necesario utilizar y entrenar un modelo el cual prediga correctamente los valores positivos para aquellas personas que caen en default como primera instancia. Además, es importante que los falsos negativos y positivos no sean tan elevados, pero a la hora de poner los mismos en la balanza, es preferible que un valor que no caería en default esté catalogado al reves, a que suceda lo contrario. \n","\n","Es por ello que, con este dataset nosotros sugerimos utilizar el modelo que utiliza Random Forest ya que las métricas se vieron beneficiadas acorde a lo que estamos buscando. "],"metadata":{"id":"UX_FFFqME-m_"}}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.7"},"colab":{"provenance":[{"file_id":"1Zy4cSj_6fQx-I_R6YOtirnckv8IKUXKu","timestamp":1655330232526}],"collapsed_sections":[]}},"nbformat":4,"nbformat_minor":0}